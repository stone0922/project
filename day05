前请回顾
1.epoll模型： 效率高，触发方式更多
2.本地套接字 AF_UNIX  本地两个进程之间的通信
3.多任务编程
   *并行   和   并发
   * 进程   线程
4.多进程编程
  时间片  PCB  PID   父子进程    进程特征
  进程状态： 三态 --就绪态     运行态     等待态
           五态-- 新建态    终止态
5.ps  -aux
  ps  -ajx
  pstree  父进程结构
  top
  nice  -20  文件名
6.os.fork()
7.os.getpid()   os.getppid()
  os._exit()    sys.exit()
8.孤儿进程      僵尸进程
******************************************
day 05
如何避免僵尸进程产生
  *处理子进程退出状态
     pid,status = os.wait()
     功能： 在父进程中阻塞等待处理子进程退出
     返回值：pid退出的子进程的PID号
           status 获取子进程退出状态(状态0)
    
    pid,status = os.waitpid(pid,option)
     功能： 在父进程中阻塞等待处理子进程退出
     参数： pid  -1  表示等待任意子进程退出
                 0  表示等待对应Pid号的子进程退出
           option 0 表示阻塞等待
                  os.WNOHANG  表示非阻塞
     返回值：pid退出的子进程的PID号
           status 获取子进程退出状态
     waitpid(-1,0)  ===>  wait()

  *让父进程先退出
     1.父进程创建子进程，等待子进程退出
     2.子进程创建二级子进程后立即退出
     3.二级子进程成为孤儿，和原来的父进程各自执行事件


multiprocessing 模块创建进程
1.需要将要执行的事情封装为函数
2.使用multiprocessing模块中的Process类创建进程对象
3.通过对象属性设置和Process的初始化函数对进程进行设置，绑定要执行的函数
4.启动进程，会自动执行进程绑定的函数
5.完成进程回收


Process()
功能：创建进程对象
参数：name 进程名称 Process-1
     target       绑定函数
     args    元组  给target函数按照位置传参
     kwargs  字典  给target函数按照键值对传参

p.start()
功能：启动进程
*target函数会自动执行，此时进程真正被创建

p.join([timeout])
功能：阻塞等待回收子进程
参数：超时时间

*使用multiprocessing创建子进程，同样子进程复制父进程的全部代码段，父子进程各自执行互不影响，父子进程有各自的运行空间

*如果不使用join回收子进程，则子进程退出后会成为僵尸进程
*需要几个子进程，就创建几个函数
*使用multiprocessing创建子进程往往父进程只是用来创建进程回收进程